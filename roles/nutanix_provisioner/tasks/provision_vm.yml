# Note the loop control here, set's the item var name in the template
# with a prefix of the letters `vm`.
# Hence all the first level items in the template that get processed
# are referred to like `vm.vm_name` for example.

- name: Debug | Print VM definitions
  debug:
    var: vm_defs
  when: global_debug

- name: Create fact with VM template contents
  set_fact: 
    vm_body: "{{ lookup('template', 'vm-body.yml.j2') | from_yaml }}"
  loop: "{{ vm_defs }}"
  register: templates
  loop_control:
    loop_var: vm

- name: Debug | Print Template lookup result
  debug:
    msg: "{{ item.ansible_facts.vm_body }}"
  when: global_debug
  with_items: "{{ templates.results }}"

- name: Create a VM from a template
  uri:
    url: "{{ api_url_v3 }}/vms"
    body:
      "{{ template.ansible_facts.vm_body }}"
    method: POST
    validate_certs: no
    body_format: json
    headers:
      Cookie: "{{ session_cookie }}"
    status_code: 202
  register: json_create_result
  with_items: "{{ templates.results }}"
  loop_control:
    loop_var: template

- name: Debug | Print VM creation result
  debug:
    var: json_create_result
  when: global_debug

- name: Debug | Display VM creation response
  debug:
    msg: "{{ item.json.metadata.uuid }}"
  when: global_debug
  with_items: "{{ json_create_result.results }}"

- name: Register the created vm uuid's for future use
  set_fact:
    _uuids: "{{ item.json.metadata.uuid }}"
  with_items: "{{ json_create_result.results }}"
  register: vm_uuids
  when: global_debug

- name: Debug | Print VM uuids 
  debug:
    var: vm_uuids
  when: global_debug
